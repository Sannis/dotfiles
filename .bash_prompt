# Show extra colored information in bash prompt:
#  * User rights and session type
#  * Information about background/stopped/screened processes
#  * Current dir (no more than 25% of line) and is it writable
#  * SCM (Git and SVN) branch and status info
#
# Based on:
#  * https://gist.github.com/31967
#  * http://www.debian-administration.org/articles/205

# The various escape codes that we can use to color our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[0;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[0;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
 LIGHT_BLUE="\[\033[1;34m\]"
 LIGHT_CYAN="\[\033[1;36m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\033[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch --no-color > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function get_prompt_git {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working directory clean" ]]; then
    state="${GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${YELLOW}"
  else
    state="${RED}"
  fi
  
  # Set arrow icon based on status against remote.
  remote_pattern="# Your branch is ([^ ]*)"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi
  
  # Get the name of the branch.
  branch_pattern="^# On branch ([^${IFS}]*)"    
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Set the final branch string.
  echo "${state}(${branch})${remote}${COLOR_NONE}"
}

#function parse_git_push_queue {
#  git log --no-color --oneline origin/$(parse_git_branch_name)...$(parse_git_branch_name) 2> /dev/null | wc -l | grep -v -P "^0$" | sed -e "s/\(.*\)/\(+\1\)/"
#}

# Detect whether the current directory is a subversion repository.
function is_svn_repository {
  test -d .svn
}

# Determine the branch information for this subversion repository. No support
# for svn status, since that needs to hit the remote repository.
function get_prompt_svn {
  # Capture the output of the "git status" command.
  svn_info="$(svn info | egrep '^URL: ' 2> /dev/null)"

  # Get the name of the branch.
  branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
  trunk_pattern="^URL: .*/trunk(/.*)?$"
  if [[ ${svn_info} =~ $branch_pattern ]]; then
    branch=${BASH_REMATCH[2]}
  elif [[ ${svn_info} =~ $trunk_pattern ]]; then
    branch='trunk'
  fi

  # Set the final branch string.
  echo "(${branch})"
}

# Trim working dir to 1/4 the screen width
function get_prompt_workingdir {
  local pwdmaxlen=$(($COLUMNS/4))
  local trunc_symbol="..."
  if [[ $PWD == $HOME* ]]; then
    newPWD="~${PWD#$HOME}" 
  else
    newPWD=${PWD}
  fi
  if [ ${#newPWD} -gt $pwdmaxlen ]; then
    local pwdoffset=$(( ${#newPWD} - $pwdmaxlen + 3 ))
    newPWD="${trunc_symbol}${newPWD:$pwdoffset:$pwdmaxlen}"
  fi
  
  echo $newPWD
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function get_prompt_end_symbol {
  if [[ ${EUID} == 0 ]] ; then
    symbol="#";
  else 
    symbol="\$"
  fi

  if test $1 -eq 0 ; then
      echo "${symbol}"
  else
      echo "${RED}${symbol}${COLOR_NONE}"
  fi
}

# Set the full bash prompt.
function set_bash_prompt {
  # Set the END variable. We do this first so we don't lose the 
  # return value of the last command.
  local END=$(get_prompt_end_symbol $?)

  # Set the SCM variable (git/svn branch name and status)
  if is_git_repository ; then
    local SCM="$(get_prompt_git) "
  elif is_svn_repository ; then
    local SCM="$(get_prompt_svn) "
  else
    local SCM=""
  fi

  # Set the USER variable
  if [[ ${EUID} == 0 ]] ; then
    local USER="${RED}\u${COLOR_NONE}"
  else
    local USER="\u"
  fi
  
  # Set the PROMPT_PWD variable
  if [ -w "${PWD}" ]; then 
    local PROMPT_PWD="${LIGHT_BLUE}$(get_prompt_workingdir)${COLOR_NONE}"
  else                                 
    local PROMPT_PWD="${LIGHT_RED}$(get_prompt_workingdir)${COLOR_NONE}"
  fi
  
  # Set the bash prompt variable.
  PS1="${USER}@\h: ${PROMPT_PWD} ${SCM}${END} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
